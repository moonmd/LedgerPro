# Generated by Django 5.2.3 on 2025-06-12 01:29

import django.db.models.deletion
import django.utils.timezone
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('phone', models.CharField(blank=True, max_length=50, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('invoice_number', models.CharField(max_length=50)),
                ('issue_date', models.DateField()),
                ('due_date', models.DateField()),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('SENT', 'Sent'), ('PAID', 'Paid'), ('VOID', 'Void')], default='DRAFT', max_length=10)),
                ('notes', models.TextField(blank=True, null=True)),
                ('subtotal', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=19)),
                ('total_tax', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=19)),
                ('total_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=19)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_invoices', to=settings.AUTH_USER_MODEL)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='invoices', to='api.customer')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invoices', to='api.organization')),
            ],
            options={
                'ordering': ['-issue_date', '-invoice_number'],
            },
        ),
        migrations.CreateModel(
            name='InvoiceItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=255)),
                ('quantity', models.DecimalField(decimal_places=2, default=Decimal('1.00'), max_digits=10)),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=19)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=19)),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=19)),
                ('invoice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='api.invoice')),
            ],
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_joined', models.DateField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.organization')),
                ('role', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.role')),
            ],
            options={
                'unique_together': {('user', 'organization')},
            },
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('pay_type', models.CharField(choices=[('SALARY', 'Salary'), ('HOURLY', 'Hourly')], max_length=10)),
                ('pay_rate', models.DecimalField(decimal_places=2, help_text='Annual salary or hourly rate', max_digits=19)),
                ('is_active', models.BooleanField(default=True)),
                ('hire_date', models.DateField(blank=True, null=True)),
                ('termination_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_employees', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(blank=True, help_text='Link to system user if employee has login access', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='employee_profile', to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='employees', to='api.organization')),
            ],
            options={
                'ordering': ['organization', 'last_name', 'first_name'],
                'unique_together': {('organization', 'email')},
            },
        ),
        migrations.CreateModel(
            name='DeductionType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('tax_treatment', models.CharField(choices=[('PRE_TAX', 'Pre-tax'), ('POST_TAX', 'Post-tax')], default='POST_TAX', max_length=10)),
                ('is_active', models.BooleanField(default=True)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deduction_types', to='api.organization')),
            ],
            options={
                'unique_together': {('organization', 'name')},
            },
        ),
        migrations.AddField(
            model_name='customer',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='customers', to='api.organization'),
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(max_length=255)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('details', models.JSONField(blank=True, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.organization')),
            ],
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('type', models.CharField(choices=[('ASSET', 'Asset'), ('LIABILITY', 'Liability'), ('EQUITY', 'Equity'), ('REVENUE', 'Revenue'), ('EXPENSE', 'Expense')], max_length=10)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='accounts', to='api.organization')),
            ],
            options={
                'unique_together': {('organization', 'name', 'type')},
            },
        ),
        migrations.AddField(
            model_name='user',
            name='organizations',
            field=models.ManyToManyField(related_name='users', through='api.Membership', to='api.organization'),
        ),
        migrations.CreateModel(
            name='PayRun',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('pay_period_start_date', models.DateField()),
                ('pay_period_end_date', models.DateField()),
                ('payment_date', models.DateField(help_text='Date employees will be paid')),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('PROCESSING', 'Processing'), ('COMPLETED', 'Completed'), ('VOIDED', 'Voided')], default='DRAFT', max_length=15)),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pay_runs', to='api.organization')),
                ('processed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='processed_pay_runs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['organization', '-payment_date'],
            },
        ),
        migrations.CreateModel(
            name='Payslip',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('gross_pay', models.DecimalField(decimal_places=2, max_digits=19)),
                ('total_deductions', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=19)),
                ('net_pay', models.DecimalField(decimal_places=2, max_digits=19)),
                ('notes', models.TextField(blank=True, help_text='e.g., hours worked if hourly', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='payslips', to='api.employee')),
                ('pay_run', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payslips', to='api.payrun')),
            ],
            options={
                'ordering': ['pay_run', 'employee__last_name'],
                'unique_together': {('pay_run', 'employee')},
            },
        ),
        migrations.CreateModel(
            name='PayslipDeduction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=19)),
                ('deduction_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.deductiontype')),
                ('payslip', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deductions_applied', to='api.payslip')),
            ],
        ),
        migrations.CreateModel(
            name='PlaidItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('access_token', models.CharField(max_length=255, unique=True)),
                ('item_id', models.CharField(max_length=255, unique=True)),
                ('institution_id', models.CharField(blank=True, max_length=255, null=True)),
                ('institution_name', models.CharField(blank=True, max_length=255, null=True)),
                ('last_successful_sync', models.DateTimeField(blank=True, null=True)),
                ('sync_cursor', models.CharField(blank=True, help_text='Cursor for Plaid transactions sync', max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='plaid_items', to='api.organization')),
                ('user', models.ForeignKey(help_text='User who linked this item', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ReconciliationRule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='User-defined name for the rule', max_length=255)),
                ('conditions', models.JSONField(help_text='List of conditions for the rule to apply')),
                ('actions', models.JSONField(help_text='Actions to perform if rule matches')),
                ('priority', models.IntegerField(default=0, help_text='Rules with lower numbers are processed first')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_recon_rules', to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reconciliation_rules', to='api.organization')),
            ],
            options={
                'ordering': ['organization', 'priority', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date', models.DateField()),
                ('description', models.TextField()),
                ('reference_number', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_transactions', to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='api.organization')),
            ],
        ),
        migrations.AddField(
            model_name='payrun',
            name='gl_transaction',
            field=models.ForeignKey(blank=True, help_text='Link to the General Ledger transaction for this pay run', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pay_run_source', to='api.transaction'),
        ),
        migrations.CreateModel(
            name='JournalEntry',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('debit_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=19)),
                ('credit_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=19)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='journal_entries', to='api.account')),
                ('transaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='journal_entries_set', to='api.transaction')),
            ],
            options={
                'verbose_name_plural': 'Journal Entries',
            },
        ),
        migrations.AddField(
            model_name='invoice',
            name='transaction',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='invoice_origin', to='api.transaction'),
        ),
        migrations.AlterUniqueTogether(
            name='customer',
            unique_together={('organization', 'name')},
        ),
        migrations.CreateModel(
            name='StagedBankTransaction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('transaction_id_source', models.CharField(help_text='Unique ID from Plaid or bank statement line', max_length=255, unique=True)),
                ('account_id_source', models.CharField(blank=True, help_text='Account ID from Plaid or bank', max_length=255, null=True)),
                ('account_name_source', models.CharField(blank=True, help_text='Account name/mask from Plaid or bank', max_length=255, null=True)),
                ('date', models.DateField(help_text='Transaction date')),
                ('posted_date', models.DateField(blank=True, help_text='Date transaction was posted', null=True)),
                ('name', models.TextField(help_text='Transaction name or description from bank')),
                ('merchant_name', models.CharField(blank=True, max_length=255, null=True)),
                ('amount', models.DecimalField(decimal_places=2, help_text='Positive for credits, negative for debits from bank perspective', max_digits=19)),
                ('currency_code', models.CharField(default='USD', max_length=3)),
                ('category_source', models.CharField(blank=True, help_text='Category from Plaid or bank', max_length=255, null=True)),
                ('status_source', models.CharField(choices=[('PENDING', 'Pending'), ('POSTED', 'Posted')], default='POSTED', help_text='Status from bank/Plaid', max_length=50)),
                ('reconciliation_status', models.CharField(choices=[('UNMATCHED', 'Unmatched'), ('MATCHED', 'Matched to Existing'), ('RULE_APPLIED', 'Rule Applied'), ('CREATED_TRANSACTION', 'New Transaction Created')], default='UNMATCHED', max_length=30)),
                ('raw_data', models.JSONField(blank=True, help_text='Raw data from Plaid or CSV for auditing/debugging', null=True)),
                ('imported_at', models.DateTimeField(auto_now_add=True)),
                ('source', models.CharField(choices=[('PLAID', 'Plaid'), ('CSV', 'CSV'), ('QBO', 'QBO')], default='PLAID', max_length=10)),
                ('applied_rule', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='applied_to_transactions', to='api.reconciliationrule')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='staged_bank_transactions', to='api.organization')),
                ('plaid_item', models.ForeignKey(blank=True, help_text='Associated Plaid item if imported via Plaid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='staged_transactions', to='api.plaiditem')),
                ('linked_transaction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='matched_bank_transactions', to='api.transaction')),
            ],
            options={
                'ordering': ['-date', '-imported_at'],
                'unique_together': {('organization', 'transaction_id_source')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='invoice',
            unique_together={('organization', 'invoice_number')},
        ),
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('phone', models.CharField(blank=True, max_length=50, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vendors', to='api.organization')),
            ],
            options={
                'ordering': ['name'],
                'unique_together': {('organization', 'name')},
            },
        ),
    ]
