# Frontend Dockerfile (Next.js)
# Base image
FROM node:20-alpine AS base

# 1. Install dependencies only when needed
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Assumes Docker build context is the project root.
COPY ledgerpro/frontend/package.json ledgerpro/frontend/package-lock.json* ledgerpro/frontend/npm-shrinkwrap.json* ledgerpro/frontend/pnpm-lock.yaml* ./
RUN \
    if [ -f yarn.lock ]; then yarn --frozen-lockfile; \
    elif [ -f package-lock.json ]; then npm ci; \
    elif [ -f pnpm-lock.yaml ]; then yarn global add pnpm && pnpm i --frozen-lockfile; \
    else echo "Lockfile not found during deps stage." && exit 1; \
    fi

# 2. Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules

# Iterative COPY commands (kept from successful build)
COPY ledgerpro/frontend/package.json ./package.json
COPY ledgerpro/frontend/package-lock.json ./package-lock.json
COPY ledgerpro/frontend/next.config.js ./next.config.js
COPY ledgerpro/frontend/tsconfig.json ./tsconfig.json
COPY ledgerpro/frontend/public ./public
COPY ledgerpro/frontend/app ./app
# Add any other essential top-level files/dirs from ledgerpro/frontend needed for the build

ENV NEXT_TELEMETRY_DISABLED 1

RUN \
    if [ -f yarn.lock ]; then yarn build; \
    elif [ -f package-lock.json ]; then npm run build; \
    elif [ -f pnpm-lock.yaml ]; then pnpm run build; \
    else echo "Lockfile not found during build stage command execution." && exit 1; \
    fi

# --- DEBUGGING LINES REMOVED ---

# 3. Production image, copy all the files and run next
FROM base AS runner
WORKDIR /app
ENV NODE_ENV production
ENV NEXT_TELEMETRY_DISABLED 1

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

COPY --from=builder /app/public ./public
RUN mkdir .next
RUN chown nextjs:nodejs .next
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

USER nextjs
EXPOSE 3000
ENV PORT 3000
CMD ["node", "server.js"]
